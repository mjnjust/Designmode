1、目的：学习各种设计模式

2、编码：utf-8

3、单例模式：Singleton1：懒汉式单例模式  Singleton2饿汉式单例模式 Singleton3 拓展的类，可以限定实例化该类的个数

4、工厂模式：以杯子为例，AbastractCupFactory是杯子工厂的虚拟类，CupFactory是一个可以产生杯子的工厂，ICup是一个杯子的接口，
所有不同类型的杯子都要实现这个接口，杯子有WineCup酒杯,TeaCup茶杯,WaterCup水杯。

5、建造者模式和模板模式：以车子为例，AbstractCar是所有车子的抽象基础类,CarA和CarB是具体的实现类。
	为什么叫建造者模式？
	假设一个产品X有很多的零件，比如有a、b、c、d四个零件，那么制造X的步骤就可以有很多，比如b->b+a->b+a+c->b+a+c+d->X，也可以a->b+a->b+a+c->b+a+c+d->X等等。
	但是这里面abcd四大零件是必须要做的，只是组装的顺序不同，那么这时候就可以使用建造者模式。
	我现在觉得模板模式和建造者模式很像，只是建造者模式可以根据需要制定抽象类中各种方法的执行顺序。
	
6、代理模式
	到目前为止，我觉得代理模式是最有用的模式，在开发的时候可以先考虑做功能，然后再考虑权限什么的问题，这样简直是神奇！
	以做作业为例，DoHomeWork接口中有一个DoHomeWork接口，Student和代理的类都要实现这个接口，HomeWorkProxy是普通代理，HomeWorkProxy2是强制代理，HomeWorkProxy3是动态代理

7、原型模式
	我觉得原型模式本质上就是一个利用clone方法代替new方法来创建新的对象的一种模式
	Ball 就是使用原型模式的类，其实就是实现了一下cloneable接口。最主要的就是要注意深拷贝和浅拷贝的区别。